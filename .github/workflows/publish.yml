name: "Publish Language Server Binaries"

on:
  push:
    branches:
      - master
      - initial # TODO: remove
  workflow_dispatch:
    inputs:
      release_tag:
        description: "Override the automatic tag name for the release"
        required: false
        type: string
      release_name:
        description: "Override the automatic name of the release"
        required: false
        type: string
      draft:
        description: "Whether to create a draft release"
        required: false
        type: boolean
        default: true
      prerelease:
        description: "Whether to mark as prerelease"
        required: false
        type: boolean
        default: false

jobs:
  determine-version:
    name: "Determine Release Version"
    runs-on: ubuntu-latest
    outputs:
      release_tag: ${{ steps.set-version.outputs.release_tag }}
      release_name: ${{ steps.set-version.outputs.release_name }}
    steps:
      - name: "Checkout"
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: "Set up Maven"
        uses: actions/setup-java@v4
        with:
          distribution: "graalvm"
          java-version: "21"
          cache: "maven"

      - name: "Determine Release Version"
        id: set-version
        run: |
          # Use manual inputs if provided
          if [ -n "${{ github.event.inputs.release_tag }}" ]; then
            echo "release_tag=${{ github.event.inputs.release_tag }}" >> $GITHUB_OUTPUT
            echo "release_name=${{ github.event.inputs.release_name || format('NPL Language Server {0}', github.event.inputs.release_tag) }}" >> $GITHUB_OUTPUT
            exit 0
          fi
          
          # Run the version determination script
          source .github/scripts/determine-version.sh
          
          # Copy the script output to GitHub Actions outputs
          echo "release_tag=$release_tag" >> $GITHUB_OUTPUT
          echo "release_name=$release_name" >> $GITHUB_OUTPUT
          echo "Using release tag: $release_tag"

  build-native:
    name: "Build ${{ matrix.os }}-${{ matrix.arch }} Native Binary"
    runs-on: ${{ matrix.runner }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: ubuntu
            runner: ubuntu-latest
            arch: x86_64
            output_name: language-server-linux-x86_64
          - os: ubuntu
            runner: linux-arm-64
            arch: aarch64
            output_name: language-server-linux-aarch64
          - os: macos
            runner: macos-13
            arch: x86_64
            output_name: language-server-macos-x86_64
          - os: macos
            runner: macos-latest
            arch: aarch64
            output_name: language-server-macos-aarch64
          - os: windows
            runner: windows-latest
            arch: x86_64
            output_name: language-server-windows-x86_64.exe

    steps:
      - name: "Checkout"
        uses: actions/checkout@v4

      - name: "Set up Maven"
        uses: actions/setup-java@v4
        with:
          distribution: "graalvm"
          java-version: "21"
          cache: "maven"

      - name: "Build language-server native binary"
        run: mvn -Pnative package -DskipTests

      - name: "Prepare binary for upload (Linux/macOS)"
        if: matrix.os != 'windows'
        run: |
          mkdir -p dist
          if [ -f target/language-server ]; then
            cp target/language-server dist/${{ matrix.output_name }}
            chmod +x dist/${{ matrix.output_name }}
          fi

      - name: "Prepare binary for upload (Windows)"
        if: matrix.os == 'windows'
        shell: pwsh
        run: |
          mkdir -p dist
          if (Test-Path target/language-server.exe) {
            Copy-Item target/language-server.exe -Destination dist/${{ matrix.output_name }}
          }

      - name: "Upload native binary artifact"
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.output_name }}
          path: dist/${{ matrix.output_name }}
          if-no-files-found: error
          retention-days: 30

  create-release:
    name: "Create GitHub Release"
    needs: [determine-version, build-native]
    if: success()
    runs-on: ubuntu-latest
    steps:
      - name: "Download individual artifacts"
        uses: actions/download-artifact@v4
        with:
          path: ./individual-artifacts

      - name: "Create Release"
        id: create_release
        uses: ncipollo/release-action@v1
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          tag: ${{ needs.determine-version.outputs.release_tag }}
          name: ${{ needs.determine-version.outputs.release_name }}
          draft: ${{ github.event.inputs.draft || true }}
          prerelease: ${{ github.event.inputs.prerelease || false }}
          artifacts: "./individual-artifacts/*/*"
          artifactErrorsFailBuild: true
